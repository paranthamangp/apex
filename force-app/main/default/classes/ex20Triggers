//Trigger Syntax

trigger triggerName on Objectname(trigger_events)
{
    //code_block
}

/* 
Trigger_events are the comma-separated list of one or more events such as:

Before insert: When using this event, the code block is executed before a new record is inserted.
Before update: When you use this event, the code gets executed before a new record is updated in the object.
Before delete: When you’re using this event, the record gets deleted before the execution of the code block.
After insert: Here, the code block gets executed first, and then the insertion of the record is done.
After update: In this event, the updating of a record is done after the execution of the code block.
After delete: When you’re using this event, you are able to delete a record after the execution of the code block.
After undelete: This event is used when the record that was sent to the Recycle Bin needs to be restored.

*/


trigger tname on contact(before insert)
{ 
    contact c = new contact();
    if (c.email==null)
}

/* 

Context Variable	Usage
isInsert	Returns true if the trigger was fired due to an insert operation
isUpdate	Returns true if the trigger was fired due to an update operation
isDelete	Returns true if the trigger was fired due to a delete operation
isBefore	Returns true if the trigger has been fired before any record was saved
isAfter	Returns true if the trigger was fired after all records have been saved
isUndelete	Returns true if the trigger was fired after a record has been recovered from the Recycle Bin
new	Returns a list of new versions of the sObject records
newMap	A map of IDs to the new versions of the sObject records
old	Returns a list of old versions of the sObject records
oldMap	A map of IDs to the old versions of the sObject records
size	The total number of records in a trigger invocation, both old and new


*/


/* The following code will prevent users from creating duplicate accounts, with the same names */

trigger AccountDuplicateTrigger on Account (before insert, before update)
   {
 for(Account a:Trigger.new)
   {
  List acc=“Select id from Account where Name=:a.Name and   Rating=:a.Rating“;
      if(acc.size()>0)
          {
          acc.Name.addError('You Cannot Create the Duplicate Account’);
          }
   }
   }